#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>   
#include <ArduinoJson.h>

//Reemplzar por datos de la red
const char* ssid = "***"; //Nombre de la red de WiFi
const char* password = "***"; //Contraseña de la red de WiFi

//Inicializacion del Bot de Telegram
#define BOTtoken "***"  //Escribir token

//ID de chat
#define CHAT_ID "***"

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

//Chequea los mensajes cada 1 segundo
const unsigned long tiempo = 1000; //tiempo medio entre mensajes de escaneo
unsigned long tiempoAnterior; //última vez que se realizó el análisis de mensajes

//definicion de los pines
const int ledPin = 13;

//estado inicial del pin
bool ledState = LOW;

//Maneja lo q sucede cada vez q recibe un mensaje
void handleNewMessages(int numNewMessages) {

  for (int i=0; i<numNewMessages; i++) {
 
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Usuario no autorizado", "");
      continue;
    }
    
    //Imprime el mensaje recibido
    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;

    if (text == "/Ayuda") {
      String welcome = "Bienvenido al sistema de control luces de la DNT iot, " + from_name + ".\n";
      welcome += "Use estos comandos para controlar los leds.\n\n";
      welcome += "/led_on para encender GPIO \n";
      welcome += "/led_off para apagar GPIO \n";
      welcome += "/Estado muestra el estado de los GPIO \n";
      welcome += "/Ayuda imprime este menú \n";
      bot.sendMessage(chat_id, welcome, "");
    }

    //encender led
    if (text == "/led_on") {
      bot.sendMessage(chat_id, "El LED esta encendido", "");
      ledState = HIGH;
      digitalWrite(ledPin, ledState);
    }

    //apagar led
    if (text == "/led_off") {
      bot.sendMessage(chat_id, "El LED esta apagado", "");
      ledState = LOW;
      digitalWrite(ledPin, ledState);
    }

    //Estado del led
    if (text == "/Estado") {
      if (digitalRead(ledPin)){
        bot.sendMessage(chat_id, "El LED esta encendido", "");
      }
      else{
        bot.sendMessage(chat_id, "El LED esta apagado", "");
      }
    }
  }
}

void setup() {
  Serial.begin(115200);

  client.setInsecure();

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  
  //Conexion a red de WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi.. \n");
  }
  Serial.print("Conectado a la red wifi. Dirección IP: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  //Verifica si hay datos nuevos en telegram cada 1 segundo
  if (millis() - tiempoAnterior > tiempo)
  {
    int numerosMensajes = bot.getUpdates(bot.last_message_received + 1);

    while (numerosMensajes)
    {
      Serial.println("Comando recibido");
      handleNewMessages(numerosMensajes);
      numerosMensajes = bot.getUpdates(bot.last_message_received + 1);
    }

    tiempoAnterior = millis();
  }
}

----------------------------------------------------------------------------------------------------------
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

//Reemplzar por datos de la red
const char* ssid = "***"; //Nombre de la red de WiFi
const char* password = "***"; //Contraseña de la red de WiFi

//Inicializacion del Bot de Telegram
#define BOTtoken "***"  //Escribir token

//ID de chat
#define CHAT_ID "***"

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

//Chequea los mensajes cada 1 segundo
const unsigned long tiempo = 1000; //tiempo medio entre mensajes de escaneo
unsigned long tiempoAnterior; //última vez que se realizó el análisis de mensajes
String chat_id;

//definicion de los pines
const int led12 = 12;
const int led13 = 13;

//estado inicial de los pines
int estadoLed12 = 0;
int estadoLed13 = 0;

int inicio = 1;

void mensajesNuevos(int numerosMensajes)
{
  for (int i = 0; i < numerosMensajes; i++)
  {
    String chat_id = bot.messages[i].chat_id;
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Usuario no autorizado", "");
      continue;
    }

    //Imprime mensaje recibido
    String text = bot.messages[i].text;
    Serial.println(text);

    if (text == "/Ayuda"){
      String ayuda = "Bienvenido al sistema de control luces de la DNT iot, " ".\n";
      ayuda += "Estas son tus opciones.\n\n";
      ayuda += "/Luz1on: para encender la Luz 1 \n";
      ayuda += "/Luz1off: para apagar la luz 1 \n";
      ayuda += "/Luz2on: para encender la Luz 2 \n";
      ayuda += "/Luz2off: para apagar la luz 2 \n";
      ayuda += "/Estado : devuelve el estado actual de las luces\n";
      ayuda += "/Ayuda: Imprime este menú \n";
      ayuda += "Recuerda el sistema distingue entre mayuculas y minusculas \n";
      bot.sendMessage(chat_id, ayuda, "");
    }
    
    //Luz 1 en el pin 12
    if (text == "/Luz1on")
    {
      bot.sendMessage(chat_id, "El LED 1 esta encendido", "");
      estadoLed12 = HIGH;
      digitalWrite(led12, estadoLed12);
    }

    if (text == "/Luz1off")
    {
      bot.sendMessage(chat_id, "El LED 1 esta apagado", "");
      estadoLed12 = LOW;
      digitalWrite(led12, estadoLed12);
    }
    
    //Luz 2 en el pin 13
    if (text == "/Luz2on")
    {
      bot.sendMessage(chat_id, "El LED 2 esta encendido", "");
      estadoLed13 = HIGH;
      digitalWrite(led13, estadoLed13);
    }

    if (text == "/Luz2off")
    {
      bot.sendMessage(chat_id, "El LED 2 esta apagado", "");
      estadoLed13 = LOW;
      digitalWrite(led13, estadoLed13);
    }  

    //Estado de las luces     
    if (text == "/Estado")
    {
    
      //Estado luz 1
      if (estadoLed12)
      {
        bot.sendMessage(chat_id, "Luz 1 encendida", "");
      }
      else
      {
        bot.sendMessage(chat_id, "Luz 1 apagada", "");
      }
      
      //Estado luz 2
      if (estadoLed13)
      {
        bot.sendMessage(chat_id, "Luz 2 encendida", "");
      }
      else
      {
        bot.sendMessage(chat_id, "Luz 2 apagada", "");
      }
    }
  }
}

void setup()
{
  Serial.begin(115200);
  client.setInsecure();
    
  pinMode(led12, OUTPUT); //inicializar  pin 12 digital como salida.
  pinMode(led13, OUTPUT); //inicializar pin 13 digital como salida.
  
  digitalWrite(led12, LOW); 
  digitalWrite(led13, LOW);
  
  //Conexion a red de WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi..");
  }
  
  Serial.print("\nConectado a la red wifi. Dirección IP: ");
  Serial.println(WiFi.localIP());
   if(inicio == 1){
    Serial.println("Sistema preparado");
    bot.sendMessage(CHAT_ID, "Sistema preparado!!!, escribe Ayuda para ver las opciones", "");//Enviamos un mensaje a telegram para informar que el sistema está listo
    inicio = 0;
    }
}

void loop()
{
  //Verifica si hay datos nuevos en telegram cada 1 segundo
  if (millis() - tiempoAnterior > tiempo)
  {
    int numerosMensajes = bot.getUpdates(bot.last_message_received + 1);

    while (numerosMensajes)
    {
      Serial.println("Comando recibido");
      mensajesNuevos(numerosMensajes);
      numerosMensajes = bot.getUpdates(bot.last_message_received + 1);
    }

    tiempoAnterior = millis();
  }
  
}
-----------------------------------------------------------------------------------------------------------------------
//version con RElay
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

//Reemplzar por datos de la red
const char* ssid = "***"; //Nombre de la red de WiFi
const char* password = "***"; //Contraseña de la red de WiFi

//Inicializacion del Bot de Telegram
#define BOTtoken "***"  //Escribir token

//ID de chat
#define CHAT_ID "***"

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

const unsigned long tiempo = 1000; //tiempo medio entre mensajes de escaneo
unsigned long tiempoAnterior; //última vez que se realizó el análisis de mensajes
String chat_id;

//definicion de los pines
const int led12 =12;
const int led13 =13;
const int Relay1=15 ;
const int Relay2=14 ;

int estadoLed12 = 0;
int estadoLed13 = 0;

int estadorelay1 = 1;
int estadorelay2 = 1;

int inicio = 1;

void mensajesNuevos(int numerosMensajes)
{
  for (int i = 0; i < numerosMensajes; i++)
  {
    String chat_id = bot.messages[i].chat_id;
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Usuario no autorizado", "");
      continue;
    }

    //Imprime mensaje recibido
    String text = bot.messages[i].text;

    if (text == "/Ayuda"){
      String ayuda = "Bienvenido al sistema de control luces con Esp32, " ".\n";
      ayuda += "Estas son tus opciones.\n\n";
      ayuda += "/Luz1on: para encender la Luz 1 \n";
      ayuda += "/Luz1off: para apagar la luz 1 \n";
      ayuda += "/Luz2on: para encender la Luz 2 \n";
      ayuda += "/Luz2off: para apagar la luz 2 \n";
      ayuda += "/R1on: para encender la relay 1 \n";
      ayuda += "/R1off: para apagar la relay 1 \n";
      ayuda += "/R2on: para encender la relay 1 \n";
      ayuda += "/R2off: para apagar la relay 1 \n";
      ayuda += "/Estado : devuelve el estado actual de las luces y relay\n";
      ayuda += "/Ayuda: Imprime este menú \n";
      ayuda += "Recuerda el sistema distingue entre mayuculas y minusculas \n";
      bot.sendMessage(chat_id, ayuda, "");
    }
    
    //Luz 1 en el pin 12
    if (text == "/Luz1on")
    {
      bot.sendMessage(chat_id, "El LED 1 esta encendido", "");
      estadoLed12 = HIGH;
      digitalWrite(led12, estadoLed12);
    }

    if (text == "/Luz1off")
    {
      bot.sendMessage(chat_id, "El LED 1 esta apagado", "");
      estadoLed12 = LOW;
      digitalWrite(led12, estadoLed12);
    }
    
    //Luz 2 en el pin 13
    if (text == "/Luz2on")
    {
      bot.sendMessage(chat_id, "El LED 2 esta encendido", "");
      estadoLed13 = HIGH;
      digitalWrite(led13, estadoLed13);
    }

    if (text == "/Luz2off")
    {
      bot.sendMessage(chat_id, "El LED 2 esta apagado", "");
      estadoLed13 = LOW;
      digitalWrite(led13, estadoLed13);
    }  

    if (text == "/R1on")
    {
      bot.sendMessage(chat_id, "El Relay1 esta encendido", "");
      estadorelay1 = LOW;
      digitalWrite(Relay1, estadorelay1);
    }

    if (text == "/R2on")
    {
      bot.sendMessage(chat_id, "El Relay 2 esta encendido", "");
      estadorelay2 = LOW;
      digitalWrite(Relay2, estadorelay2);
    }

    if (text == "/R1off")
    {
      bot.sendMessage(chat_id, "El Relay1 esta encendido", "");
      estadorelay1 = HIGH;
      digitalWrite(Relay1, estadorelay1);
    }

    if (text == "/R2off")
    {
      bot.sendMessage(chat_id, "El Relay 2 esta encendido", "");
      estadorelay2 = HIGH;
      digitalWrite(Relay2, estadorelay2);
    }

    //Estado de las luces     
    if (text == "/Estado")
    {
    
      //Estado luz 1
      if (estadoLed12)
      {
        bot.sendMessage(chat_id, "Luz 1 encendida", "");
      }
      else
      {
        bot.sendMessage(chat_id, "Luz 1 apagada", "");
      }
      
      //Estado luz 2
      if (estadoLed13)
      {
        bot.sendMessage(chat_id, "Luz 2 encendida", "");
      }
      else
      {
        bot.sendMessage(chat_id, "Luz 2 apagada", "");
      }
      //Estado Relay1
      if (estadorelay1)
      {
        bot.sendMessage(chat_id, "Relay 1 encendida", "");
      }
      else
      {
        bot.sendMessage(chat_id, "Relay 1 apagada", "");
      }
      //Estado Relay2
      if (estadorelay2)
      {
        bot.sendMessage(chat_id, "Relay 2 encendida", "");
      }
      else
      {
        bot.sendMessage(chat_id, "Relay 2 apagada", "");
      }
    }
  }
}

void setup()
{
  Serial.begin(115200);
  client.setInsecure();
    
  pinMode(led12, OUTPUT); //inicializar  pin 12 digital como salida.
  pinMode(led13, OUTPUT); //inicializar pin 13 digital como salida.
  pinMode(Relay1, OUTPUT); //inicializar  pin 15 digital como salida.
  pinMode(Relay2, OUTPUT); //inicializar pin 14 digital como salida.
 
  digitalWrite(led12, LOW); 
  digitalWrite(led13, LOW);
  
  digitalWrite(Relay1, HIGH); //lOGICA INVERSA PARA RELAY
  digitalWrite(Relay2, HIGH);
  
  //Conexion a red de WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi..");
  }
  
  Serial.print("\nConectado a la red wifi. Dirección IP: ");
  Serial.println(WiFi.localIP());
   if(inicio == 1){
    Serial.println("Sistema preparado");
    bot.sendMessage(CHAT_ID, "Sistema preparado!!!, escribe Ayuda para ver las opciones", "");//Enviamos un mensaje a telegram para informar que el sistema está listo
    inicio = 0;
    }
}

void loop()
{
  //Verifica si hay datos nuevos en telegram cada 1 segundo
  if (millis() - tiempoAnterior > tiempo)
  {
    int numerosMensajes = bot.getUpdates(bot.last_message_received + 1);

    while (numerosMensajes)
    {
      Serial.println("Comando recibido");
      mensajesNuevos(numerosMensajes);
      numerosMensajes = bot.getUpdates(bot.last_message_received + 1);
    }

    tiempoAnterior = millis();
  }
  
}